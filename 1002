#  Flutter 기본 구조 정리

---

## 1️ Flutter의 구성 요소

| 구성 요소 | 주요 역할 | 사용 언어 |
|------------|------------|------------|
| **Framework** | 앱 개발자가 사용하는 영역. UI 설계, 위젯 관리, 상태(State) 처리 등 | **Dart** |
| **Engine** | 렌더링, 애니메이션, 그래픽 처리, 텍스트 표시 등 핵심 기능 담당 | **C/C++** |
| **Embedder** | 각 플랫폼(Android, iOS, Windows 등)에 맞게 앱을 실행할 수 있도록 연결 | **플랫폼별 언어 (Java/Kotlin, Swift, C++)** |

>  **요약:**  
> Flutter = **Framework (Dart)** + **Engine (C/C++)** + **Embedder (Platform)**

___________________________________________________________________________________________________________________________________________________

## 2️ Flutter의 핵심 철학

>  “**모든 것은 위젯(Widget)이다.**”

- 버튼, 텍스트, 이미지, 레이아웃, 심지어 앱 자체도 전부 위젯으로 구성됨  
- Flutter는 UI의 모든 요소를 위젯 단위로 표현하며, 트리 구조로 관리함  

___________________________________________________________________________________________________________________________________________________

## 3️ 기본 위젯 종류

| 구분 | 설명 | 예시 |
|------|------|------|
| **StatelessWidget** | 상태(state)가 변하지 않는 위젯 | Text, Icon, RaisedButton |
| **StatefulWidget** | 사용자 입력이나 시간 경과에 따라 상태가 변하는 위젯 | Checkbox, Slider, TextField |
| **InheritedWidget / Provider** | 하위 위젯들과 데이터를 공유할 때 사용 | 테마, 로그인 상태, 전역 상태 관리 등 |

___________________________________________________________________________________________________________________________________________________

## 4️ 위젯 선택 기준

| 상황 | 선택 위젯 |
|------|------------|
| 화면 상태가 변하지 않음 | `StatelessWidget` |
| 사용자의 입력, 시간, 이벤트 등으로 상태가 변함 | `StatefulWidget` |
| 여러 위젯 간에 데이터 공유가 필요 | `InheritedWidget` / `Provider` |

>  **요약:**  
> 상태가 없다면 Stateless,  
> 상태가 있으면 Stateful,  
> 데이터를 여러 위젯에 공유해야 한다면 InheritedWidget/Provider.

___________________________________________________________________________________________________________________________________________________

## 5️ 위젯 생명주기 (Lifecycle)

> **StatefulWidget의 수명주기 메서드**

| 단계 | 메서드 | 설명 |
|------|--------|------|
| **초기화** | `initState()` | 위젯이 처음 생성될 때 한 번만 호출됨 (데이터 초기화 등) |
| **상태 변경** | `setState()` | 위젯 상태가 바뀌면 화면을 다시 그림 |
| **위젯 갱신** | `didUpdateWidget()` | 부모 위젯이 변경되어 다시 빌드될 때 호출 |
| **위젯 제거** | `dispose()` | 위젯이 사라질 때 정리 작업 수행 |

>  **Tip:**  
> - API 호출, 컨트롤러 생성 → `initState()`  
> - 스트림/컨트롤러 해제 → `dispose()`

___________________________________________________________________________________________________________________________________________________

## 6️ 레이아웃 구성 팁

- `Column` / `Row` : 세로 / 가로 정렬  
- `Expanded` / `Flexible` : 공간 비율 조정  
- `Container` : 여백, 색상, 크기, 정렬 등 다목적 사용  
- `Padding`, `Align`, `Center` : 배치 조정  
- `ListView`, `GridView` : 스크롤 가능 리스트  

>  **핵심:**  
> Flutter는 **UI = 코드**이므로, 위젯을 **트리(Tree)** 형태로 조립하듯 구성한다.

___________________________________________________________________________________________________________________________________________________

## 7️ 성능 최적화 포인트

| 주제 | 설명 |
|------|------|
| **setState 최소화** | 꼭 필요한 부분에만 `setState()` 호출 |
| **const 위젯 사용** | 변하지 않는 위젯은 `const` 키워드로 선언 |
| **빌드 최적화** | 중복되는 위젯 빌드 최소화, `ListView.builder` 사용 |
| **이미지 캐싱** | `CachedNetworkImage` 패키지 활용 |
| **상태관리 활용** | `Provider`, `Riverpod`, `Bloc` 등으로 rebuild 최소화 |

___________________________________________________________________________________________________________________________________________________

